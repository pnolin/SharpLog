@page "/backlog/search-game"

@using Models.DTOs
@using Models.Forms
@using Interfaces
@inject IGameService _gameService;

<div id="search-game-page">
    <div id="search-game-wrapper">
        <BlazoredTypeahead id="search-game-input"
                            SearchMethod="@SearchGames"
                            @bind-Value="@_searchGameForm.SearchedGame"
                            Debounce="500"
                            MinimumLength="3">
            <SelectedTemplate>
                @GetSearchedGameDisplay(@context, false)
            </SelectedTemplate>
            <ResultTemplate>
                @GetSearchedGameDisplay(@context, true)
            </ResultTemplate>
            <NotFoundTemplate>
                Sorry, there weren't any search results.
            </NotFoundTemplate>
        </BlazoredTypeahead>
        <button class="btn btn-primary">Add</button>
    </div>
</div>

@code {
    private SearchGameForm _searchGameForm = new SearchGameForm();

    private async Task<IEnumerable<SearchedGame>> SearchGames(string searchText)
    {
        var games = await _gameService.SearchGame(searchText);

        return games;
    }

    private string GetSearchedGameDisplay(SearchedGame searchedGame, bool withPlatforms) =>
        $"{GetGameNameAndReleaseYearDisplay(searchedGame)}" +
            $"{(withPlatforms ? GetPlatformsDisplay(searchedGame) : "")}";

    private string GetGameNameAndReleaseYearDisplay(SearchedGame searchedGame) =>
        $"{searchedGame.Name} {(searchedGame.ReleaseYear.HasValue ? $"({searchedGame.ReleaseYear.Value.ToString()})" : string.Empty)}";

    private string GetPlatformsDisplay(SearchedGame searchedGame) =>
        $"{(searchedGame.Platforms.Any() ? $" - {string.Join(", ", searchedGame.Platforms)}" : string.Empty)}";
}